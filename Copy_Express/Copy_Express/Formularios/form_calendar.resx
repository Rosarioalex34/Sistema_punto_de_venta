<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        fwA=
</value>
  </data>
</root>